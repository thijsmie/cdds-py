name: CI automated testing

on: push

jobs:
  build-cyclone:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    runs-on: ubuntu-latest

    steps:
    - name: Checkout 🚨
      uses: actions/checkout@v2

    - name: Checkout Cyclone 🚨
      uses: actions/checkout@v2
      with:
        repository: eclipse-cyclonedds/cyclonedds
        path: cyclonedds
        ref: master
        token: ${{ secrets.PAT }}

    - name: Check for Cyclone build cache 💽
      id: cyclone-cache
      uses: actions/cache@v2
      with:
        path: cyclonedds
        key: ${{ runner.os }}-v5-${{ hashFiles('cyclonedds/.git/refs/heads/master') }}

    - name: Get latest CMake ⚡
      if: steps.cyclone-cache.outputs.cache-hit != 'true'
      uses: lukka/get-cmake@v3.19.1

    - name: Build Cyclone 🌀
      if: steps.cyclone-cache.outputs.cache-hit != 'true'
      run: |
        mkdir cyclonedds/build cyclonedds/install && cd cyclonedds/build
        cmake .. -DCMAKE_INSTALL_PREFIX=../install
        cmake --build . --target install

    - name: Build idlc-py 🥧
      if: steps.cyclone-cache.outputs.cache-hit != 'true'
      run: |
        mkdir build && cd build
        cmake ../src/idlpy -DCMAKE_INSTALL_PREFIX=../cyclonedds/install -DCMAKE_PREFIX_PATH=../cyclonedds/install
        cmake --build . --target install

  test:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    runs-on: ubuntu-latest
    needs: build-cyclone
    strategy:
      fail-fast: false
      matrix:
        python:
          - 3.6
          - 3.7
          - 3.8
          - 3.9
          - 3.10.0-alpha.6

    steps:
    - name: Checkout 🚨
      uses: actions/checkout@v2

    - name: Get Cyclone build cache 💽
      id: cyclone-cache
      uses: actions/cache@v2
      with:
        path: cyclonedds
        key: ${{ runner.os }}-v5-${{ hashFiles('cyclonedds/.git/refs/heads/master') }}
    
    - name: Install python 🐍
      uses: actions/setup-python@v2
      with:
        python-version: '${{ matrix.python }}'

    - name: Packages with pip 🐶
      run: python -m pip install --upgrade pip
           pip install pytest pytest-cov flake8

    - name: Install pycdr 🐍
      working-directory: ./src/pycdr
      run: |
        pip install .

    - name: Install cyclonedds 🐍
      working-directory: ./src/cyclonedds
      env:
        CYCLONEDDS_HOME: ${{ github.workspace }}/cyclonedds/install
      run: |
        pip install .

    - name: Lint with flake8 ❄
      run: |
        flake8 ./src/pycdr/pycdr --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 ./src/pycdr/pycdr --count --exit-zero --max-complexity=10 --max-line-length=127 --per-file-ignores="__init__.py:F401" --statistics
        flake8 ./src/cyclonedds/cyclonedds --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 ./src/cyclonedds/cyclonedds --count --exit-zero --max-complexity=10 --max-line-length=127 --per-file-ignores="__init__.py:F401" --statistics

    - name: Run pycdr tests 🧪
      working-directory: ./src/pycdr
      run: pytest

    - name: Run cyclonedds tests 🧪
      working-directory: ./src/cyclonedds
      env:
        CYCLONEDDS_HOME: ${{ github.workspace }}/cyclonedds/install
      run: pytest

    - name: Collect test coverage ⚗
      run: |
        coverage combine src/cyclonedds/.coverage src/pycdr/.coverage
        coverage xml

    - name: Upload coverage report to codecov 🚀
      uses: codecov/codecov-action@v1
      env:
        PYTHON: '${{ matrix.python }}'
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: coverage.xml
        flags: unittests
        env_vars: PYTHON
        name: codecov-umbrella
        fail_ci_if_error: true
        verbose: false